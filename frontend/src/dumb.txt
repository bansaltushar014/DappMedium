import React from 'react';
import axios from "axios";

// function Dashboard(props){
  class Dashboard extends React.Component {

    constructor(){
      super();
      this.state = {
        write: 1,
        show: 0,
        articlesData: []
      }

    this.getNoOfArticles = this.getNoOfArticles.bind(this);
    // this.getArticle = this.getArticle.bind(this);
    global.addresses = [];
    }

  // const [write, setwrite] = useState(1)
  // const [show, setshow] = useState(0)


  // var contractInstance = useRef(0);
  // var noOfArticles = useRef(0);
  // var addresses = [];
  // var articlesData = [];
  // var dem0 = ["demo1", "demo2"];

  componentWillMount(){
    debugger;
    console.log(this.props.contractInstance);
    this.contractInstance = this.props.contractInstance;
    // this.getNoOfArticles();
  }
  //
  // useEffect(() => {
  //   console.log(props.contractInstance);
  //   contractInstance = props.contractInstance;
  //   getNoOfArticles();
  // });

  getNoOfArticles = async () => {
    debugger;
    var that1 = this;
    console.log("Inside GetNumOfArticles");
    console.log(that1.contractInstance);
    await that1.contractInstance.methods.noOfarticles().call()
    .then(r => {
      console.log("No of Articles are "+r);
      that1.noOfArticles = r;

      var that2 = that1;
      var i =0;
      for(i=0; i< that2.noOfArticles; i++ ){
         that2.contractInstance.methods.getArticle(i).call()
        .then( r=> {
          global.addresses.push(r);
          // console.log(addresses[i]);
          if(i == that2.noOfArticles-1){
            var i = 0;
            var that3 = that2;
            for(i=0; i< that3.noOfArticles; i++ ){
              var hash = global.addresses[i];
              var that4 = that3;
              axios.get('https://ipfs.io/ipfs/'+hash)
              .then(function (response) {
                that4.state.articlesData.push(response);

                if(i == that4.noOfArticles-1){
                  for(var i =0;i< that4.noOfArticles; i++){
                    console.log(that4.state.articlesData[i]);
                  }
                }
                  // resolve();
                  // that.renderarticleData().then(r=> {resolve()});

                })
                .catch(function (error) {
                  console.log(error);

                });

              }
          }

            // that1.getDatafromIPFS().then(r=> {resolve()})
          })
          .catch( e=> {
            console.log(e);

          })

        }

    })
    .catch(e => {
      console.log(e);

    })

  };

//   getArticle = async () => {
//
//
//
//
//     return new Promise(async function(resolve,reject){
//     var i =0;
//     for(i=0; i< that1.noOfArticles; i++ ){
//      await that1.contractInstance.methods.getArticle(i).call()
//       .then( r=> {
//         global.addresses.push(r);
//         // console.log(addresses[i]);
//         if(i == that1.noOfArticles-1)
//           resolve();
//           // that1.getDatafromIPFS().then(r=> {resolve()})
//       })
//       .catch( e=> {
//         console.log(e);
//         reject();
//       })
//
//   }
// })
// })
//   }

//   getDatafromIPFS = async () => {
//     var that2 = this;
//     this.getArticle().then(r=> {
//     var that1 = that2;
//
//     return new Promise(async function(resolve,reject){
//     var i = 0;
//     for(i=0; i< that1.noOfArticles; i++ ){
//       var hash = global.addresses[i];
//       var that = that1;
//       await axios.get('https://ipfs.io/ipfs/'+hash)
//       .then(function (response) {
//         that.state.articlesData.push(response);
//
//         if(i == that.noOfArticles-1)
//           resolve();
//           // that.renderarticleData().then(r=> {resolve()});
//
//       })
//       .catch(function (error) {
//         console.log(error);
//         reject();
//       });
//
//     }
//   });
// });
//   }

  // renderarticleData = () => {
  //   var that2 = this;
  //   this.getDatafromIPFS().then(r=> {
  //   var that1 = that2;
  //   return new Promise(function(resolve,reject){
  //   for(var i =0;i< that1.noOfArticles; i++){
  //     console.log(that1.state.articlesData[i]);
  //     resolve();
  //   }
  // })
  // });
  // }

   getAddress = () => {
    // for(var i=0; i< noOfArticles; i++ ){
      this.contractInstance.methods.getWriterAddress(0).call()
      .then( r=> {
        console.log(r);

      })
      .catch( e=> {
        console.log(e);
      })
    // }
  }

  render() {
    return (

        <>
        Dashboard
        <p> data is {this.state.show} {this.state.articlesData[0]}</p>
      {
        this.state.articlesData.map((item) => {
          return <li> {item.data} </li>
        })
      }
        </>


    )}



}

export default Dashboard;
